# This is a basic workflow to help you get started with Actions

name: SonarQube CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - development

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "sonarqube"
  sonarqube:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0

      # Rust cache
      - uses: Swatinem/rust-cache@v1
        with:
          working-directory: ./backend/
          target-dir: ./backend/target/
          cache-on-failure: true

      # Install Rust component clippy
      - name: Install clippy
        run: rustup component add clippy

      # Install tarpaulin for test coverage reports
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate sonar report files
        run: |
          cd backend/
          # Generate clippy report for SonarQube analysis
          cargo clippy --message-format=json &> clippy.report
          # Generate coverage report
          cargo tarpaulin --out Lcov
          sed -i s#SF:.*/backend#SF:backend#g ./lcov.info

      - name: Build @skyrocket/ng-api-client
        run: cd lib/ng-api-client && npm ci && npm run build

      - name: Generate karma test report
        run: |
          cd frontend/
          npm ci
          npm link ../lib/ng-api-client/dist/
          npm run test:report

      # Runs a single command using the runners shell
      - name: SonarQube scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
